<?phpdefined('SYSPATH') or die('No direct script access.');class Controller_Report extends Controller_Layout {    public function before() {        parent::before();        $this->template->set_filename('layout/admin');    }    public function __construct(Request $request) {        // Check Login or not        if (Auth::instance()->logged_in('', $all_required = false) == 0) {            Request::current()->redirect('/auth/signin');        }        // Assign the request to the controller        parent::__construct($request);    }    public function action_leadsales() {        $objLeadsubmit = ORM::factory(leadsubmit);        $leadsData = $objLeadsubmit->select(DB::expr('sum(price) as sum_price'), 'client_id', 'tbl_client.vUsername');        $leadsData = $objLeadsubmit->join('tbl_client', 'left')->on('tbl_lead_submit.client_id', '=', 'tbl_client.iClient_id');        $leadsData = $objLeadsubmit->where('post_response', '=', 'Success');        if (isset($_POST['search_startdate']) && isset($_POST['search_enddate'])) {            $search_start_date = date('Y-m-d', strtotime($_POST['search_startdate']));            $search_end_date = date('Y-m-d', strtotime($_POST['search_enddate']));            $leadsData = $objLeadsubmit->where('c_date', '>=', $search_start_date);            $leadsData = $objLeadsubmit->where('c_date', '<=', $search_end_date);        }        $leadsData = $objLeadsubmit->group_by('client_id');        $leadsData = $objLeadsubmit->find_all();        //echo Database::instance()->last_query;        /* print_r($leadsData);          exit; */        $this->template->title = "Dashboard";        $this->template->content = View::factory('report/leadsales')                ->set('leadsData', $leadsData)                ->set('paydayleadsData', $paydayleadsData)                ->set('money_coming', $money_coming)                ->set('paydayleadsData_reminder', $paydayleadsData_reminder)                ->set('newest_members_lists', $newest_members_lists);    }    public function action_leadsalesreport() {       $objLeadsubmit = ORM::factory(leadrevenuereport);       $leadsData = $objLeadsubmit->select(DB::expr('sum(price) as sum_price'), 'client_id', 'tbl_client.vUsername');       $leadsData = $objLeadsubmit->join('tbl_client', 'left')->on('tbl_lead_revenue_report.client_id', '=', 'tbl_client.iClient_id');       if (isset($_POST['search_startdate']) && isset($_POST['search_enddate'])) {            $search_start_date = date('Y-m-d', strtotime($_POST['search_startdate']));            $search_end_date = date('Y-m-d', strtotime($_POST['search_enddate']));            $leadsData = $objLeadsubmit->where('c_date', '>=', $search_start_date);            $leadsData = $objLeadsubmit->where('c_date', '<=', $search_end_date);        }        $leadsData = $objLeadsubmit->group_by('c_date');        $leadsData = $objLeadsubmit->find_all();               $this->template->title = "Dashboard";        $this->template->content = View::factory('report/leadsales')                ->set('leadsData', $leadsData)                ->set('paydayleadsData', $paydayleadsData)                ->set('money_coming', $money_coming)                ->set('paydayleadsData_reminder', $paydayleadsData_reminder)                ->set('newest_members_lists', $newest_members_lists);    }    public function action_addleadsales($edit_date = false) {        $objClient = ORM::factory(client);        $clientData = $objClient->where('eStatus', '=', 'Active')->find_all()->as_array();        $process_done = 0;        if ($_POST) {            if (isset($edit_date) && $edit_date != '') {                $total_rows = DB::delete('tbl_lead_revenue_report')->where('c_date', '=', $edit_date)->execute();                $edit_process = 1;            }            $client_amount = $_POST['client_amount'];            $client_id = $_POST['client_id'];            for ($i = 0; $i < count($client_amount); $i++) {                $objLeadRevenue = ORM::factory('leadRevenueReport');                $objLeadRevenue->client_id = $client_id[$i];                $objLeadRevenue->price = $client_amount[$i];                $objLeadRevenue->c_date = date('Y-m-d', strtotime($_POST['search_startdate']));                $objLeadRevenue->save();                $process_done = 1;            }        }        if (isset($edit_date) && $edit_date != '') {            $objLeadRevenue = ORM::factory('leadRevenueReport');            $LeadRevenue_edit_data = $objLeadRevenue->where('c_date', '=', $edit_date);            $LeadRevenue_edit_data = $objLeadRevenue->find_all();            foreach ($LeadRevenue_edit_data as $key => $value) {                $edit_price_array[] = $value->price;            }            $process_done = 0;            $edit_process = 1;        }        //echo Database::instance()->last_query;        /* print_r($leadsData);          exit; */        $this->template->title = "Dashboard";        $this->template->content = View::factory('report/addleadssales')                ->set('clientData', $clientData)                ->set('edit_price_array', $edit_price_array)                ->set('edit_date', $edit_date)                ->set('edit_process', $edit_process)                ->set('process_done', $process_done);    }    public function action_lead_return_salesreport() {               $objLeadsubmit = ORM::factory(leadRevenueReturnReport);        $leadsData = $objLeadsubmit->select(DB::expr('sum(price) as sum_price'), 'client_id', 'tbl_client.vUsername');        $leadsData = $objLeadsubmit->join('tbl_client', 'left')->on('tbl_lead_revenue_return_report.client_id', '=', 'tbl_client.iClient_id');        if (isset($_POST['search_startdate']) && isset($_POST['search_enddate'])) {            $search_start_date = date('Y-m-d', strtotime($_POST['search_startdate']));            $search_end_date = date('Y-m-d', strtotime($_POST['search_enddate']));            $leadsData = $objLeadsubmit->where('c_date', '>=', $search_start_date);            $leadsData = $objLeadsubmit->where('c_date', '<=', $search_end_date);        }        $leadsData = $objLeadsubmit->group_by('c_date');        $leadsData = $objLeadsubmit->find_all();                $this->template->title = "Dashboard";        $this->template->content = View::factory('report/viewreturnleadsales')                ->set('leadsData', $leadsData)                ->set('paydayleadsData', $paydayleadsData)                ->set('money_coming', $money_coming)                ->set('paydayleadsData_reminder', $paydayleadsData_reminder)                ->set('newest_members_lists', $newest_members_lists);    }    public function action_add_return_leadsales($edit_date = false) {        $objClient = ORM::factory(client);        $clientData = $objClient->where('eStatus', '=', 'Active')->find_all()->as_array();        $process_done = 0;        if ($_POST) {           if (isset($edit_date) && $edit_date != '') {                $total_rows = DB::delete('tbl_lead_revenue_return_report')->where('c_date', '=', $edit_date)->execute();                $edit_process = 1;            }           $client_amount = $_POST['client_amount'];            $client_id = $_POST['client_id'];            for ($i = 0; $i < count($client_amount); $i++) {                $objLeadRevenue = ORM::factory('leadRevenueReturnReport');                $objLeadRevenue->client_id = $client_id[$i];                $objLeadRevenue->price = $client_amount[$i];                $objLeadRevenue->c_date = date('Y-m-d', strtotime($_POST['search_startdate']));                $objLeadRevenue->save();                $process_done = 1;            }        }        if (isset($edit_date) && $edit_date != '') {            $objLeadRevenue = ORM::factory('leadRevenueReturnReport');            $LeadRevenue_edit_data = $objLeadRevenue->where('c_date', '=', $edit_date);            $LeadRevenue_edit_data = $objLeadRevenue->find_all();            foreach ($LeadRevenue_edit_data as $key => $value) {                $edit_price_array[] = $value->price;            }            $process_done = 0;            $edit_process = 1;        }        $this->template->title = "Dashboard";        $this->template->content = View::factory('report/addreturnleadssales')                ->set('clientData', $clientData)                ->set('edit_price_array', $edit_price_array)                ->set('edit_date', $edit_date)                ->set('edit_process', $edit_process)                ->set('process_done', $process_done);    }        public function action_viewleadsales() {        $objLeadRevenue = ORM::factory('leadRevenueReport');        $LeadRevenue_data = $objLeadRevenue->select(DB::expr('sum(price) as sum_price'), 'client_id', 'tbl_client.vUsername');        $LeadRevenue_data = $objLeadRevenue->join('tbl_client', 'left')->on('tbl_lead_revenue_report.client_id', '=', 'tbl_client.iClient_id');        $LeadRevenue_data = $objLeadRevenue->group_by('c_date');        if ($_POST['action_frm'] != '') {            $action_array = explode('_', $_POST['action_frm']);            //print_r($action_array);exit;            $total_rows = DB::delete('tbl_lead_revenue_report')->where('c_date', '=', $action_array[1])->execute();            //$objLeadRevenue_delete = ORM::factory('leadRevenueReport',$action_array[1]);            //$objLeadRevenue_delete->delete();            //echo Database::instance()->last_query;exit;            $process_done = 1;        }        $pagination_make = Pagination::factory(array(                    'total_items' => 30,                    'items_per_page' => 30,        ));        $LeadRevenue_data = $objLeadRevenue->limit($pagination_make->items_per_page);        $LeadRevenue_data = $objLeadRevenue->offset($pagination_make->offset);        $LeadRevenue_data = $objLeadRevenue->find_all();        // echo Database::instance()->last_query;exit;        $page_links_pagging_make = $pagination_make->render();        $this->template->content = View::factory('report/viewleadsales')                ->bind('process_done', $process_done)                ->bind('page_links_pagging_make', $page_links_pagging_make)                ->bind('process_dup', $process_dup)                ->bind('makedata', $LeadRevenue_data);    }    public function action_indexr() {        $obj_dashboard = new Model_Dashboard();        $logged_in_userid = Auth::instance()->get_user()->id;        $this->template->title = "Dashboard";        $this->template->content = View::factory('dashboard/index_real')                ->set('dash_datas', $dash_datas)                ->set('money_coming', $money_coming)                ->set('newest_members_lists', $newest_members_lists);    }}// End Dashboard